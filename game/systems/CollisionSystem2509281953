//CollisionSystem.js
import { Collidable, Position } from '../components/index.js';

export class CollisionSystem {
  constructor(world) {
    this.world = world;
  }

  update(dt) {
    // 1. ワールドに存在する、当たり判定を持つエンティティをすべて取得
    const entities = this.world.getEntities([Collidable, Position]);
    
    // 2. すべてのエンティティのペアを総当たりでチェックする
    //    (iは0から、jはi+1から始めることで、同じペアを2度チェックしないようにする)
    for (let i = 0; i < entities.length; i++) {
      for (let j = i + 1; j < entities.length; j++) {
        const entityA = entities[i];
        const entityB = entities[j];

        const collidableA = this.world.getComponent(entityA, Collidable);
        const positionA = this.world.getComponent(entityA, Position);

        const collidableB = this.world.getComponent(entityB, Collidable);
        const positionB = this.world.getComponent(entityB, Position);

        // 3. 衝突グループが同じなら判定しない (敵同士、弾同士の衝突は無視)
        if (collidableA.group === collidableB.group) {
          continue;
        }

        // 4. 円形衝突判定
        const dx = positionA.x - positionB.x;
        const dy = positionA.y - positionB.y;
        const distanceSq = dx * dx + dy * dy; // 距離の2乗 (平方根を省略する高速化テクニック)

        const radiusSum = collidableA.radius + collidableB.radius;
        const radiusSumSq = radiusSum * radiusSum; // 半径の合計の2乗

        if (distanceSq < radiusSumSq) {
          // 衝突ッ！
          console.log(`衝突検知: ${collidableA.group}(${entityA}) と ${collidableB.group}(${entityB})`);
          
          // TODO: ここに衝突イベントを発行する処理を追加する
        }
      }
    }
  }
}

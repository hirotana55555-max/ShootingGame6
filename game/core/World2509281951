export class World {
  constructor() {
    this.entities = new Set();
    this.components = new Map();
    this.systems = [];
    this.nextEntityId = 0;

    // ★追加：削除予約を格納するセット（初期化）
    this.pendingRemovals = new Set();
  }

  createEntity() {
    const entityId = this.nextEntityId++;
    this.entities.add(entityId);
    return entityId;
  }

  addComponent(entityId, component) {
    const componentName = component.constructor.name;
    if (!this.components.has(componentName)) {
      this.components.set(componentName, new Map());
    }
    this.components.get(componentName).set(entityId, component);
  }

  removeEntity(entityId) {
    // 注意: これは「即時削除」をする関数。
    // 基本は markForRemoval を使って「あとでまとめて削除」する方が安全です。
    this.entities.delete(entityId);
    for (const componentMap of this.components.values()) {
      componentMap.delete(entityId);
    }
  }

  // ←★★★ この位置に追加（removeEntity の直後が読みやすい） ★★★
  /**
   * 削除を予約する（すぐには消さない）
   * system の中からは基本これを呼ぶ
   * @param {number} entityId
   */
  markForRemoval(entityId) {
    if (!this.entities.has(entityId)) return;
    this.pendingRemovals.add(entityId);
  }

  /**
   * 予約されている削除を実行する（まとめて安全に削除）
   */
  flushRemovals() {
    for (const entityId of this.pendingRemovals) {
      this.removeEntity(entityId);
    }
    this.pendingRemovals.clear();
  }

  getEntities(componentClasses) {
    const entities = [];
    for (const entityId of this.entities) {
      if (componentClasses.every(cls => this.hasComponent(entityId, cls))) {
        entities.push(entityId);
      }
    }
    return entities;
  }

  hasComponent(entityId, componentClass) {
    const componentName = componentClass.name;
    return this.components.has(componentName) && this.components.get(componentName).has(entityId);
  }

  getComponent(entityId, componentClass) {
    const componentName = componentClass.name;
    if (!this.hasComponent(entityId, componentClass)) {
      return undefined;
    }
    return this.components.get(componentName).get(entityId);
  }

  addSystem(system) {
    this.systems.push(system);
  }

  update(dt) {
    for (const system of this.systems) {
      // system は world を参照できる実装を想定（例: system.world または system.update(world, dt)）
      system.update(dt);
    }

    // ★追加：すべての system の update が終わったら削除を実行
    this.flushRemovals();
  }
}